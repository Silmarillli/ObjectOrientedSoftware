
SHIPPING SIMULATOR

An application simulating a shipping network using Object-Oriented Software principles in C++. The Simulator allows a user to set up a network using 'Location' and 'Segment' entities, and simulate the network's behaviour, as 'Shipments' are injected into and transported around the network.
The emphasis is on the role of programming conventions, style, restrictions, and design patterns to leverage object-oriented programming for programming-in-the-large.


BUILD LIBRARIES

You will need CMake to generate makefiles to compile the libraries with. If you are in the root of the project, just run the following commands in a terminal
mkdir build && cd build
cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=.. ..
make install

This will create a lib folder for libraries in the project root and a bin folder for the executables test scenarios.

CLASS STRUCTURE AND HEIRARCHY

* ENGINE LAYER

The Engine later is responsible for managing the actual entity and
value objects. These classes reside in the Engine layer:

	Location - Class that represent location, has a subclass for each specific location type. Each location object has a list of pointer to its outgoing segments. It also keeps track of its own type through a LocationType enum attrivute. This LocationType makes it easy for the Rep layer to make sure that Locations do not get connected to the wrong type of Segments, for example. 
	
	Segment - In the same was as Location keeps track of its own type, the Segment subclasses for the different types of segments has a SegmentType enum attribute for the same reason (easy control of which segments that can be connected to which type of terminals and return segments). A segment also has a few more attributes (source, length, returnSegment, expeditite support) to fit the defined model.
	
	EntityManager - This is a class designed for keeping track of what we call "Entity object". Entity objects are, at this point, Locations and Segments (could be extended to handle more types of objects in the future). A network has one EntityManager (no more, no less). All operations from the Rep layer that has to do with Locations and Segments (adding, updating, reading or deleting) has to go trough here. The reason for that is that we want to be able to have several notifiees that all reacts to changes of these objects. To ensure that we don't accidentily change an Location or Segment directly using its pointer, all EntityManager accessors returns const pointers. To make this model possible, the EntityManager has collections keeping track of all Segments, Location and notifiees. It also has a set of mutators to read, create, update or delete these objects. For every relevant action taken, it sends notifications to all its notifiees (at this point these are fixed to Conn and Stats).
	
	Fleet - The class is pretty small and fairly straight-forward implemented using an enum for type and and an array for storing the vehicle attribute values. The fleet cannot be deleted or changed from it's Instance manager and is in that sense fixed to a network. 
	
	Conn - Conn is a reactor class and reacts on changes notified by the EntityManager. In the Conn Object, we store collections of const smart pointers to Locations and Segments (we call them "valid" Locations and Segments). The reasons for this is to optimize the queries later (in case we have a lots of different segments and locations, but only a small amount is properly connected to each other). The queries are returned as 'PathTrees' (lists of different Paths and properties) which can be interpreted by the rep layer.
	
	Stats - This class reacts to changes in the Locations and Segments in the network (it inherits from the EntityManager's notifiee class) to constantly keep updated attributes. 
	
	EngineManager - This class is the entry point into the Engine layer and all it does is providing pointers to the networks' Conn, Fleet, Stats and EntityManager Classes.
	
As mentioned, the Conn, Fleet and Stats objects are fixed to an Instance manager. These cannot be changed or deleted. This is a deicision made to ensure that the user gets consistent results (so that the client doesn't try to change Fleet or Stats instances mid-simulation, for exampele) and keeping the notifier structure intact. It would also be unpredictable to change the Conn object in the middle of a simulation as that object keeps track of the connectivity in the graph.

* REP LAYER

The Rep layer has a class that corresponds to each class in the Engine layer. It's role is to parse the requests from the Client layer, and does so by making sure the input is correct and that the objects that it's trying to perform operations on actually exixts. We have tried to build the parsing in such a way that the program does not crash regardless of what the user tries to do. Any kind of invalid input should result in a cerr message, and all queries with invalid properties return empty strings. ConnRep returns '\n' if nothing is found (both valid and invalid inputs can return '\n'). 

* ENGINEMANAGER ENTRY

The Rep layer classes all have a pointer to the EngineManager to be able to send instructions to the Engine objects. This pointer has to be provided when the Rep layer objects are constructed, and this is done in ManagerImpl's instanceNew function. 

* DELETION

To support deletion of Instances, we have implemented a simple DeletableInstance class that inherits from Instance, and which the Rep objects then inherit from. It only has one (virtual) function which is del(). This structure is chosen so that the Instance manager can call instanceDel on all different types of object. For example, when deleting a Segment instance, the SegmentRep has to make sure that the EntityManager first goes trough all sources to the Segment and remove that segment from the source list, detach any return Segment, and also make sure that the Conn and Stats objects get notified of this deletion. When deleting a Location, all sources that are connected to this location has to be properly updated along with the Stats and Conn objects, and so on. Therefore, ConnRep and LocationRep implements the del() in their own way. Both takes care of all deletion logic in the network and then removes the last reference by erasing the Instance from the Instance list (and by that invoking the chain of destructors, relying on the Smart pointer model). 
This way of handling deletion does not rely on that the smart pointer to the instance in the Client layer gets removed, it can easily remain in the program until the program ends. If the user deletes an Instance and still try to access it using the smart pointer, he or she simply gets an error message and the program ignores the request.

* DEBUG

To enable lots of cout debugging commands, you need to #define DEBUG_OUTPUT in fwk/Debug.h . The debug cout's are by default NOT enabled.
				
